{
	"name": "df_transform_cases_and_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "CaseAndDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "CountryLoopupSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_and_deaths",
						"type": "DatasetReference"
					},
					"name": "casesAndDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "filterEUdata"
				},
				{
					"name": "selectRequiredColumn"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          daily_count as integer,",
				"          date as date,",
				"          rate_14_day as double,",
				"          source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CaseAndDeathsSource",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountryLoopupSource",
				"CaseAndDeathsSource filter(continent=='Europe' && not(isNull(country_code))) ~> filterEUdata",
				"filterEUdata select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          daily_count,",
				"          source,",
				"          each(match(name=='date'),",
				"               'Reported_date' = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectRequiredColumn",
				"selectRequiredColumn pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          source,",
				"          Reported_date),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     Count = sum(daily_count),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> pivot1",
				"pivot1, CountryLoopupSource lookup(pivot1@country == CountryLoopupSource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = pivot1@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population = pivot1@population,",
				"          source,",
				"          Reported_date,",
				"          cases_count = {confirmed cases_Count},",
				"          deaths_count = deaths_Count",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          cases_count,",
				"          deaths_count,",
				"          Reported_date,",
				"          source",
				"     )) ~> casesAndDeathsSink"
			]
		}
	}
}